version: "3.7"
services:
  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - 80:80
      - 443:443
    environment:
      - CADDY_INGRESS_NETWORKS=proxy
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
    restart: unless-stopped
  janus-gateway:
    image: 'canyan/janus-gateway:0.10.7'
    command: ["/usr/local/bin/janus", "-F", "/usr/local/etc/janus"]
    ports:
      - "8088:8088"
      - "8089:8089"
      - "8889:8889"
      - "8000:8000"
        #- "8188:8188"
      - "7088:7088"
      - "7089:7089"
    expose:
      - 8188
    volumes:
      - "./janus/etc/janus/janus.jcfg.live:/usr/local/etc/janus/janus.jcfg"
      - "./janus/etc/janus/janus.plugin.audiobridge.jcfg:/usr/local/etc/janus/janus.plugin.audiobridge.jcfg"
    networks:
      - proxy
    restart: always
    labels:
      caddy: ${JANUS_URL}
      caddy.reverse_proxy: "{{upstreams 8188}}"    
  mongo:
    image: bitnami/mongodb:5.0
    restart: always
    volumes:
      - db-data:/bitnami/mongodb
    networks:
      - default
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: meteor
      MONGODB_ADVERTISED_HOSTNAME: mongo
      ALLOW_EMPTY_PASSWORD: "yes"    
  app:
    build: 
      context: ../app
    expose:
      - 3000
    networks:
      - proxy
      - default
    restart: unless-stopped
    labels:
      caddy: ${METEOR_URL}
      caddy.reverse_proxy: "{{upstreams 3000}}"
    environment:
      PORT: 3000
      ROOT_URL: ${METEOR_URL}
      MONGO_URL: mongodb://mongo:27017/meteor
      HTTP_FORWARDED_COUNT: 1



networks:
  proxy:
    external: true

volumes:
  caddy_data: {}
  db-data: {}
